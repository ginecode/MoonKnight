// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file chat.proto (package chat, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum chat.Role
 */
export enum Role {
  /**
   * @generated from enum value: BLOCKED = 0;
   */
  BLOCKED = 0,

  /**
   * @generated from enum value: DENIED = 10;
   */
  DENIED = 10,

  /**
   * @generated from enum value: REQUEST = 20;
   */
  REQUEST = 20,

  /**
   * @generated from enum value: USER = 30;
   */
  USER = 30,

  /**
   * @generated from enum value: MODERATOR = 40;
   */
  MODERATOR = 40,

  /**
   * @generated from enum value: ADMIN = 50;
   */
  ADMIN = 50,
}
// Retrieve enum metadata with: proto3.getEnumType(Role)
proto3.util.setEnumType(Role, "chat.Role", [
  { no: 0, name: "BLOCKED" },
  { no: 10, name: "DENIED" },
  { no: 20, name: "REQUEST" },
  { no: 30, name: "USER" },
  { no: 40, name: "MODERATOR" },
  { no: 50, name: "ADMIN" },
]);

/**
 * @generated from enum chat.Active
 */
export enum Active {
  /**
   * @generated from enum value: OFFLINE = 0;
   */
  OFFLINE = 0,

  /**
   * @generated from enum value: ONLINE = 10;
   */
  ONLINE = 10,

  /**
   * @generated from enum value: TYPING = 20;
   */
  TYPING = 20,
}
// Retrieve enum metadata with: proto3.getEnumType(Active)
proto3.util.setEnumType(Active, "chat.Active", [
  { no: 0, name: "OFFLINE" },
  { no: 10, name: "ONLINE" },
  { no: 20, name: "TYPING" },
]);

/**
 * @generated from enum chat.Visible
 */
export enum Visible {
  /**
   * @generated from enum value: CLOSE = 0;
   */
  CLOSE = 0,

  /**
   * @generated from enum value: MODERATED = 10;
   */
  MODERATED = 10,

  /**
   * @generated from enum value: OPEN = 20;
   */
  OPEN = 20,
}
// Retrieve enum metadata with: proto3.getEnumType(Visible)
proto3.util.setEnumType(Visible, "chat.Visible", [
  { no: 0, name: "CLOSE" },
  { no: 10, name: "MODERATED" },
  { no: 20, name: "OPEN" },
]);

/**
 * @generated from enum chat.MediaType
 */
export enum MediaType {
  /**
   * @generated from enum value: TEXT = 0;
   */
  TEXT = 0,

  /**
   * @generated from enum value: IMAGE = 5;
   */
  IMAGE = 5,

  /**
   * @generated from enum value: VIDEO = 10;
   */
  VIDEO = 10,

  /**
   * @generated from enum value: AUDIO = 15;
   */
  AUDIO = 15,

  /**
   * @generated from enum value: PDF = 20;
   */
  PDF = 20,

  /**
   * @generated from enum value: FILE = 30;
   */
  FILE = 30,

  /**
   * @generated from enum value: QR = 35;
   */
  QR = 35,
}
// Retrieve enum metadata with: proto3.getEnumType(MediaType)
proto3.util.setEnumType(MediaType, "chat.MediaType", [
  { no: 0, name: "TEXT" },
  { no: 5, name: "IMAGE" },
  { no: 10, name: "VIDEO" },
  { no: 15, name: "AUDIO" },
  { no: 20, name: "PDF" },
  { no: 30, name: "FILE" },
  { no: 35, name: "QR" },
]);

/**
 * @generated from enum chat.Const
 */
export enum Const {
  /**
   * @generated from enum value: users = 0;
   */
  users = 0,

  /**
   * @generated from enum value: rooms = 10;
   */
  rooms = 10,

  /**
   * @generated from enum value: tweets = 20;
   */
  tweets = 20,

  /**
   * @generated from enum value: id = 100;
   */
  id = 100,

  /**
   * @generated from enum value: nam = 150;
   */
  nam = 150,

  /**
   * @generated from enum value: email = 200;
   */
  email = 200,

  /**
   * @generated from enum value: phone = 250;
   */
  phone = 250,

  /**
   * @generated from enum value: avatar = 350;
   */
  avatar = 350,

  /**
   * @generated from enum value: status = 400;
   */
  status = 400,

  /**
   * @generated from enum value: created = 600;
   */
  created = 600,

  /**
   * @generated from enum value: open = 700;
   */
  open = 700,

  /**
   * @generated from enum value: members = 800;
   */
  members = 800,

  /**
   * @generated from enum value: tweet_count = 900;
   */
  tweet_count = 900,

  /**
   * @generated from enum value: description = 1000;
   */
  description = 1000,
}
// Retrieve enum metadata with: proto3.getEnumType(Const)
proto3.util.setEnumType(Const, "chat.Const", [
  { no: 0, name: "users" },
  { no: 10, name: "rooms" },
  { no: 20, name: "tweets" },
  { no: 100, name: "id" },
  { no: 150, name: "nam" },
  { no: 200, name: "email" },
  { no: 250, name: "phone" },
  { no: 350, name: "avatar" },
  { no: 400, name: "status" },
  { no: 600, name: "created" },
  { no: 700, name: "open" },
  { no: 800, name: "members" },
  { no: 900, name: "tweet_count" },
  { no: 1000, name: "description" },
]);

/**
 * @generated from message chat.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 100;
   */
  id = "";

  /**
   * @generated from field: string nam = 200;
   */
  nam = "";

  /**
   * @generated from field: string email = 300;
   */
  email = "";

  /**
   * @generated from field: string phone = 400;
   */
  phone = "";

  /**
   * string token = 5;
   *
   * @generated from field: string avatar = 500;
   */
  avatar = "";

  /**
   * @generated from field: chat.Active status = 600;
   */
  status = Active.OFFLINE;

  /**
   * @generated from field: repeated string rooms = 700;
   */
  rooms: string[] = [];

  /**
   * @generated from field: repeated string roomRequest = 800;
   */
  roomRequest: string[] = [];

  /**
   * repeated string rooms = 8 [json_name = "dinosaur"];
   * int32 level = 9;
   *
   * @generated from field: string created = 900;
   */
  created = "";

  /**
   * google.protobuf.Timestamp updatedAt = 11;
   *
   * @generated from field: chat.Visible open = 1000;
   */
  open = Visible.CLOSE;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 200, name: "nam", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 300, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 400, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 500, name: "avatar", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 600, name: "status", kind: "enum", T: proto3.getEnumType(Active) },
    { no: 700, name: "rooms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 800, name: "roomRequest", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 900, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1000, name: "open", kind: "enum", T: proto3.getEnumType(Visible) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message chat.RoomUser
 */
export class RoomUser extends Message<RoomUser> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: chat.Role role = 10;
   */
  role = Role.BLOCKED;

  /**
   * @generated from field: string created = 20;
   */
  created = "";

  constructor(data?: PartialMessage<RoomUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.RoomUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "role", kind: "enum", T: proto3.getEnumType(Role) },
    { no: 20, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomUser {
    return new RoomUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomUser {
    return new RoomUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomUser {
    return new RoomUser().fromJsonString(jsonString, options);
  }

  static equals(a: RoomUser | PlainMessage<RoomUser> | undefined, b: RoomUser | PlainMessage<RoomUser> | undefined): boolean {
    return proto3.util.equals(RoomUser, a, b);
  }
}

/**
 * @generated from message chat.Room
 */
export class Room extends Message<Room> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string nam = 10;
   */
  nam = "";

  /**
   * @generated from field: string avatar = 20;
   */
  avatar = "";

  /**
   * @generated from field: string description = 30;
   */
  description = "";

  /**
   * @generated from field: repeated chat.RoomUser members = 40;
   */
  members: RoomUser[] = [];

  /**
   * @generated from field: string created = 50;
   */
  created = "";

  /**
   * open : true = Anyone can join, false = cant join, null = send request to join
   *
   * @generated from field: chat.Visible open = 60;
   */
  open = Visible.CLOSE;

  /**
   * @generated from field: int32 tweet_count = 70;
   */
  tweetCount = 0;

  constructor(data?: PartialMessage<Room>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.Room";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "nam", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "avatar", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "members", kind: "message", T: RoomUser, repeated: true },
    { no: 50, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "open", kind: "enum", T: proto3.getEnumType(Visible) },
    { no: 70, name: "tweet_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Room {
    return new Room().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJsonString(jsonString, options);
  }

  static equals(a: Room | PlainMessage<Room> | undefined, b: Room | PlainMessage<Room> | undefined): boolean {
    return proto3.util.equals(Room, a, b);
  }
}

/**
 * @generated from message chat.Tweet
 */
export class Tweet extends Message<Tweet> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string sender_id = 10;
   */
  senderId = "";

  /**
   * @generated from field: string room_id = 20;
   */
  roomId = "";

  /**
   * @generated from field: string created = 30;
   */
  created = "";

  /**
   * @generated from field: chat.MediaType media_type = 40;
   */
  mediaType = MediaType.TEXT;

  /**
   * @generated from field: string text = 50;
   */
  text = "";

  /**
   * @generated from field: string link = 60;
   */
  link = "";

  constructor(data?: PartialMessage<Tweet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.Tweet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sender_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "media_type", kind: "enum", T: proto3.getEnumType(MediaType) },
    { no: 50, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tweet {
    return new Tweet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tweet {
    return new Tweet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tweet {
    return new Tweet().fromJsonString(jsonString, options);
  }

  static equals(a: Tweet | PlainMessage<Tweet> | undefined, b: Tweet | PlainMessage<Tweet> | undefined): boolean {
    return proto3.util.equals(Tweet, a, b);
  }
}

